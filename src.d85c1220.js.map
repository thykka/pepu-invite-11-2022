{"version":3,"sources":["src/snowflake.ts","src/spritesheet.ts","src/scroller.ts","src/snow.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.d85c1220.js","sourceRoot":"..","sourcesContent":["export interface SnowflakeOptions {\n  width?: number;\n  height?: number;\n  container?: HTMLElement;\n}\n\ninterface Cell {\n  x: number;\n  y: number;\n  i: number;\n  ice: boolean;\n  frz: boolean;\n  ngi: number[];\n  ngh: Cell[];\n}\nconst { random, floor } = Math;\nconst lerp = (a: number, b: number, t: number): number => (1 - t) * a + t * b;\n\nexport class Snowflake {\n  container = document.body;\n  canvas = document.createElement('canvas');\n  ctx!: CanvasRenderingContext2D;\n  width: number;\n  height: number;\n  scale: number = 6;\n  rows: number;\n  columns: number;\n  cellSize: number;\n  cells: Cell[];\n  stepIndex: number;\n  maxSteps: number;\n  lastUpdate = 0;\n\n  constructor(options?: SnowflakeOptions) {\n    Object.assign(this, options);\n    this.scale = floor(\n      Math.log((this.container.offsetWidth * this.container.offsetHeight) / 3) -\n        4\n    );\n    this.width = this.container.offsetWidth / this.scale;\n    this.height = this.container.offsetHeight / this.scale;\n    this.rows = floor(this.height);\n    this.columns = floor(this.width);\n    this.cellSize = this.width / this.columns;\n    this.stepIndex = 0;\n    this.maxSteps = Math.min(this.columns, this.rows) * 2;\n\n    this.initCanvas();\n    this.cells = this.initCells();\n    this.step();\n  }\n\n  initCanvas(): void {\n    this.ctx = this.canvas.getContext('2d')!;\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.canvas.dataset.snowflake = '';\n    this.container.appendChild(this.canvas);\n    this.ctx.globalCompositeOperation = 'source-over';\n  }\n\n  initCells(): Cell[] {\n    const cells: Cell[] = [];\n    const spawns = Array.from({ length: random() * random() * 5 }, () =>\n      [random() * this.columns, random() * this.rows].map(floor)\n    );\n    let i = 0;\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.columns; x++) {\n        const ice = spawns.some(([sx, sy]) => x === sx && y === sy);\n        cells.push(this.initCell(x, y, i++, ice));\n      }\n    }\n    cells.forEach((cell) => {\n      cell.ngh = this.getNeighbors(cell, cells);\n    });\n    return cells;\n  }\n\n  initCell(x: number, y: number, i: number, ice: boolean): Cell {\n    return {\n      x,\n      y,\n      i,\n      ice,\n      ngh: [],\n      ngi: this.getNeighborIndexes(x, y),\n      frz: false\n    };\n  }\n\n  getNeighbors(cell: Cell, cells = this.cells): Cell[] {\n    return cell.ngi.map((i) => cells[i]);\n  }\n\n  step(): void {\n    const now = performance.now();\n    const delta = now - this.lastUpdate;\n    if (delta > 1000 / 20) {\n      this.updateCells();\n      this.drawCells(this.stepIndex / this.maxSteps);\n      this.lastUpdate = now;\n    }\n    if (this.stepIndex < this.maxSteps) {\n      requestAnimationFrame(() => {\n        this.step();\n      });\n      this.stepIndex++;\n    } else {\n      this.stepIndex = 0;\n      this.cells = this.initCells();\n      this.step();\n    }\n  }\n\n  updateCells(): void {\n    this.cells.forEach((cell: Cell) => {\n      if (cell.ice) return;\n      const frozenNeighbors = cell.ngh.filter((c) => c.ice);\n      if (frozenNeighbors.length !== 1) return;\n      cell.frz = true;\n    });\n    this.cells.forEach((cell) => {\n      if (!cell.frz) return;\n      cell.ice = true;\n      cell.frz = false;\n    });\n  }\n\n  drawCells(t: number): void {\n    this.ctx.fillStyle = 'hsl(0, 0%, 15%)';\n    this.ctx.globalAlpha = 16 / 256;\n    this.ctx.fillRect(0, 0, this.width, this.height);\n    this.ctx.globalAlpha = 1;\n    this.ctx.fillStyle = `hsl(${lerp(160, 250, t * t * t)}, ${lerp(\n      100,\n      40,\n      t * (2 - t)\n    )}%, ${lerp(50, 10, t * (2 - t))}%)`;\n    this.cells.forEach((cell: Cell) => {\n      if (random() < 6e-5) cell.ice = true;\n      if (!cell.ice) return;\n      this.ctx.fillRect(cell.x, cell.y, 1, 1);\n    });\n  }\n\n  getNeighborIndexes(\n    x: number,\n    y: number,\n    w = this.columns,\n    h = this.rows\n  ): number[] {\n    const coords: number[][] = [];\n    const xo = y % 2;\n    if (xo) {\n      coords.push([1, 0], [0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1]);\n    } else {\n      coords.push([1, 0], [1, -1], [0, -1], [-1, 0], [0, 1], [1, 1]);\n    }\n    return coords\n      .map(([u, v]) => [x + u, y + v])\n      .filter(([x, y]) => x >= 0 && x < w && y >= 0 && y < h)\n      .map(([x, y]) => this.xyToIdx(x, y, w))\n      .sort();\n  }\n\n  xyToIdx(x: number, y: number, w: number): number {\n    return x + y * w;\n  }\n}\n\n/*\n\n      0   1   2   3\n0      0   1   2   3\n1    4   5   6   7\n2      8   9  10  11\n3   12  13  14  15\n\n*/\n\nconst tests = [\n  { args: [0, 0, 4, 4], expect: [1, 4, 5] },\n  { args: [1, 0, 4, 4], expect: [0, 2, 5, 6] },\n  { args: [2, 0, 4, 4], expect: [1, 3, 6, 7] },\n  { args: [3, 0, 4, 4], expect: [2, 7] },\n  { args: [0, 1, 4, 4], expect: [0, 5, 8] },\n  { args: [1, 1, 4, 4], expect: [0, 1, 4, 6, 8, 9] },\n  { args: [3, 3, 4, 4], expect: [10, 11, 14] }\n];\ntests.forEach((test, index) => {\n  const result = Snowflake.prototype.getNeighborIndexes(...test.args);\n  if (result.join(' ') !== test.expect.join(' ')) {\n    console.error(\n      'Test ' +\n        (index + 1) +\n        ' FAIL: expected ' +\n        test.args +\n        ' to result ' +\n        test.expect +\n        ' - got ' +\n        result\n    );\n  }\n});\n","export interface SpritesheetOptions {\r\n  image: HTMLImageElement;\r\n  rows: number;\r\n  cols: number;\r\n}\r\n\r\nexport class Spritesheet {\r\n  image: HTMLImageElement;\r\n  rows: number;\r\n  cols: number;\r\n  cellWidth = 0;\r\n  cellHeight = 0;\r\n\r\n  constructor(options: SpritesheetOptions) {\r\n    this.image = options.image;\r\n    this.rows = options.rows;\r\n    this.cols = options.cols;\r\n\r\n    if (!this.image.complete) {\r\n      this.image.addEventListener('load', () => {\r\n        this.#setCellSize();\r\n      });\r\n    } else {\r\n      this.#setCellSize();\r\n    }\r\n  }\r\n\r\n  #setCellSize() {\r\n    this.cellWidth = Math.floor(this.image.width / this.cols);\r\n    this.cellHeight = Math.floor(this.image.height / this.rows);\r\n  }\r\n\r\n  drawSprite(\r\n    index: number,\r\n    x: number,\r\n    y: number,\r\n    target: CanvasRenderingContext2D\r\n  ) {\r\n    const cw = this.cellWidth;\r\n    const ch = this.cellHeight;\r\n    const cx = (index % this.rows) * cw;\r\n    const cy = Math.floor(index / this.rows) * cw;\r\n    target.drawImage(this.image, cx, cy, cw, ch, x | 0, y | 0, cw, ch);\r\n  }\r\n}\r\n","import { Spritesheet, SpritesheetOptions } from './spritesheet';\n\nexport interface ScrollerOptions {\n  container: HTMLElement;\n  message: string;\n  letterWidth?: number;\n  letterHeight?: number;\n  width?: number;\n  height?: number;\n}\n\nconst { PI, round, cos } = Math;\n\nexport class Scroller {\n  container: HTMLElement;\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  font: Spritesheet;\n  letters: string[];\n  letterWidth: number;\n  letterHeight: number;\n  width: number;\n  height: number;\n  startTime = 0;\n\n  constructor(options: ScrollerOptions, fontOptions: SpritesheetOptions) {\n    this.container = options.container;\n    this.letters = options.message.split('');\n    this.font = new Spritesheet(fontOptions);\n    this.letterWidth = options.letterWidth ?? this.font.cellWidth;\n    this.letterHeight = options.letterHeight ?? this.font.cellHeight;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.dataset.scroller = '';\n    this.width = options.width ?? this.container.offsetWidth;\n    this.height = options.height ?? this.container.offsetHeight;\n    this.canvas.width = round(this.width);\n    this.canvas.height = round(this.height);\n    this.container.appendChild(this.canvas);\n\n    this.ctx = this.canvas.getContext('2d')!;\n\n    this.draw();\n  }\n\n  draw(t = 0) {\n    if (!this.startTime) this.startTime = t;\n    const time = (t - this.startTime) / 1000;\n    const { width, height } = this.canvas;\n    const msgSize = this.letters.length;\n    const msgWidth = (msgSize + 2) * this.letterWidth;\n    const scrollDuration = msgSize / 5;\n    const msgHeight = (height - this.letterHeight) / 2;\n    this.ctx.clearRect(0 - 0.5, 0 - 0.5, width, height);\n    this.letters.forEach((letter, index) => {\n      const x =\n        width +\n        index * this.letterWidth -\n        ((time / scrollDuration) % 1) * (msgWidth + width);\n      if (x < -this.letterWidth || x >= width) return;\n      const y = cos(2.5 * time + (index / -10) * PI) * msgHeight + msgHeight;\n      this.font.drawSprite(letter.charCodeAt(0), round(x), round(y), this.ctx);\n    });\n    requestAnimationFrame((t: number) => this.draw(t));\n  }\n}\n","interface Flake {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  el: HTMLElement;\r\n}\r\n\r\nconst { random, floor, cos, sin, min, max } = Math;\r\nconst sample = (arr: any[]): any => arr[floor(random() * arr.length)];\r\nconst choose = (arr: any[], v: number): any =>\r\n  arr[floor(min(1, max(v, 0)) * arr.length)];\r\n\r\nexport class Snow {\r\n  container: HTMLElement;\r\n  chars: string[];\r\n  flakes: Flake[] = [];\r\n  amount = 42;\r\n  w = window.innerWidth;\r\n  h = window.innerHeight;\r\n  pad = 8;\r\n\r\n  constructor(container: HTMLElement) {\r\n    this.chars = '⋅·•+*❅❄❆'.split('');\r\n    this.container = container;\r\n    this.container.classList.add('snow');\r\n    this.w = this.container.offsetWidth;\r\n    this.h = this.container.offsetHeight;\r\n    this.init();\r\n    const style = document.createElement('style');\r\n    style.innerHTML = `\r\n    .flake {\r\n      display: inline-block; position: absolute; top: -1em; left: 0;\r\n      font-family: 'Arial'; font-size: 12px; z-index: 9001;\r\n    }\r\n    `;\r\n    document.head.appendChild(style);\r\n    window.addEventListener('resize', this.handleResize.bind(this));\r\n  }\r\n\r\n  init() {\r\n    this.flakes = Array.from(\r\n      { length: this.amount },\r\n      (): Flake => {\r\n        const el = document.createElement('span');\r\n        el.classList.add('flake');\r\n        el.innerText = sample(this.chars);\r\n        this.container.appendChild(el);\r\n        return {\r\n          x: random() * this.w,\r\n          y: random() * this.h,\r\n          z: random(),\r\n          el\r\n        };\r\n      }\r\n    );\r\n    this.update();\r\n  }\r\n\r\n  handleResize() {\r\n    this.w = window.innerWidth;\r\n    this.h = window.innerHeight;\r\n  }\r\n\r\n  update() {\r\n    const time = performance.now() / 1000;\r\n    const { w, h, pad, amount, chars } = this;\r\n    this.flakes.forEach((flake, i) => {\r\n      const z = cos(time * flake.z) / 2;\r\n      flake.y += 1 + z;\r\n      flake.el.innerHTML = choose(chars, z + 0.5);\r\n      if (flake.y >= h + pad) {\r\n        flake.x = random() * w;\r\n        flake.y -= h + pad * 2;\r\n        flake.z = random();\r\n      }\r\n      flake.x += cos(time * flake.z + (2 * i) / amount) / 2 + 0.25;\r\n      if (flake.x < -pad) flake.x += w;\r\n      if (flake.x > w) flake.x -= w;\r\n      flake.el.style.transform = `translate(calc(${flake.x}px - 50%), ${flake.y}px)`;\r\n    });\r\n    requestAnimationFrame(() => this.update());\r\n  }\r\n}\r\n","import './styles.css';\nimport { Snowflake } from './snowflake';\nimport { Scroller } from './scroller';\nimport { Snow } from './snow';\n\nconst play = document.getElementById('play') as HTMLElement;\nconst app = document.getElementById('app') as HTMLElement;\nconst font = document.getElementById('font') as HTMLImageElement;\n\nfunction formatInterval() {\n  const now = new Date();\n  let when = '25.';\n  if (now.getFullYear() === 2022 && now.getMonth() === 10) {\n    if (now.getDate() === 24) {\n      when = 'HUOMENNA';\n    }\n    if (now.getDate() === 23) {\n      when = 'YLIHUOMENNA';\n    }\n  } else {\n    when += '11.';\n  }\n  return when;\n}\n\nfunction start() {\n  play.classList.add('hidden');\n  app.classList.remove('hidden');\n  new Snow(app);\n  new Snowflake({ container: app });\n\n  const [w, h] = window.innerWidth > window.innerHeight ? [256, 96] : [128, 64];\n\n  new Scroller(\n    {\n      container: app,\n      message: [\n        'HEI SINÄ!',\n        'ÄLÄ JÄÄDY!',\n        [formatInterval(), 'PIKKUJOULU-PEPU'].join(' '),\n        '...MUTTA MISSÄ SUN ARVAT!?',\n        'X_X',\n        'TIEDÄT MITÄ TEHDÄ...',\n        'MOBILEPAY:040 414 7489',\n        'Ã Ã Ã Â'\n      ].reduce(\n        (r, m, i, a) =>\n          r + (i < a.length ? `      ${['$', '^', '~'][i % 3]}      ` : '') + m\n      ),\n      letterWidth: 10,\n      width: w,\n      height: h\n    },\n    {\n      image: font,\n      rows: 16,\n      cols: 16\n    }\n  );\n}\n\nconst audio = document.querySelector('audio')!;\nwindow.addEventListener('click', () => {\n  if (audio.paused) {\n    start();\n    audio.muted = false;\n    audio.play();\n  } else {\n    audio.muted = !audio.muted;\n  }\n});\n\n//*/\n"]}